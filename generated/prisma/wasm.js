
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountsScalarFieldEnum = {
  id: 'id',
  subtype: 'subtype',
  family_id: 'family_id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  accountable_type: 'accountable_type',
  accountable_id: 'accountable_id',
  balance: 'balance',
  currency: 'currency',
  is_active: 'is_active',
  classification: 'classification',
  import_id: 'import_id',
  plaid_account_id: 'plaid_account_id',
  scheduled_for_deletion: 'scheduled_for_deletion',
  last_synced_at: 'last_synced_at',
  cash_balance: 'cash_balance',
  locked_attributes: 'locked_attributes'
};

exports.Prisma.Active_storage_attachmentsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  record_type: 'record_type',
  record_id: 'record_id',
  blob_id: 'blob_id',
  created_at: 'created_at'
};

exports.Prisma.Active_storage_blobsScalarFieldEnum = {
  id: 'id',
  key: 'key',
  filename: 'filename',
  content_type: 'content_type',
  metadata: 'metadata',
  service_name: 'service_name',
  byte_size: 'byte_size',
  checksum: 'checksum',
  created_at: 'created_at'
};

exports.Prisma.Active_storage_variant_recordsScalarFieldEnum = {
  id: 'id',
  blob_id: 'blob_id',
  variation_digest: 'variation_digest'
};

exports.Prisma.AddressesScalarFieldEnum = {
  id: 'id',
  addressable_type: 'addressable_type',
  addressable_id: 'addressable_id',
  line1: 'line1',
  line2: 'line2',
  county: 'county',
  locality: 'locality',
  region: 'region',
  country: 'country',
  postal_code: 'postal_code',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Ar_internal_metadataScalarFieldEnum = {
  key: 'key',
  value: 'value',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.BalancesScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  date: 'date',
  balance: 'balance',
  currency: 'currency',
  created_at: 'created_at',
  updated_at: 'updated_at',
  cash_balance: 'cash_balance'
};

exports.Prisma.Budget_categoriesScalarFieldEnum = {
  id: 'id',
  budget_id: 'budget_id',
  category_id: 'category_id',
  budgeted_spending: 'budgeted_spending',
  currency: 'currency',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.BudgetsScalarFieldEnum = {
  id: 'id',
  family_id: 'family_id',
  start_date: 'start_date',
  end_date: 'end_date',
  budgeted_spending: 'budgeted_spending',
  expected_income: 'expected_income',
  currency: 'currency',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  family_id: 'family_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  parent_id: 'parent_id',
  classification: 'classification',
  lucide_icon: 'lucide_icon'
};

exports.Prisma.ChatsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  title: 'title',
  instructions: 'instructions',
  error: 'error',
  latest_assistant_response_id: 'latest_assistant_response_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Credit_cardsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  available_credit: 'available_credit',
  minimum_payment: 'minimum_payment',
  apr: 'apr',
  expiration_date: 'expiration_date',
  annual_fee: 'annual_fee',
  locked_attributes: 'locked_attributes'
};

exports.Prisma.CryptosScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  locked_attributes: 'locked_attributes'
};

exports.Prisma.Data_enrichmentsScalarFieldEnum = {
  id: 'id',
  enrichable_type: 'enrichable_type',
  enrichable_id: 'enrichable_id',
  source: 'source',
  attribute_name: 'attribute_name',
  value: 'value',
  metadata: 'metadata',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DepositoriesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  locked_attributes: 'locked_attributes'
};

exports.Prisma.EntriesScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  entryable_type: 'entryable_type',
  entryable_id: 'entryable_id',
  amount: 'amount',
  currency: 'currency',
  date: 'date',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  import_id: 'import_id',
  notes: 'notes',
  excluded: 'excluded',
  plaid_id: 'plaid_id',
  locked_attributes: 'locked_attributes'
};

exports.Prisma.Exchange_ratesScalarFieldEnum = {
  id: 'id',
  from_currency: 'from_currency',
  to_currency: 'to_currency',
  rate: 'rate',
  date: 'date',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.FamiliesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  currency: 'currency',
  locale: 'locale',
  stripe_plan_id: 'stripe_plan_id',
  stripe_customer_id: 'stripe_customer_id',
  stripe_subscription_status: 'stripe_subscription_status',
  date_format: 'date_format',
  country: 'country',
  last_synced_at: 'last_synced_at',
  timezone: 'timezone',
  data_enrichment_enabled: 'data_enrichment_enabled',
  trial_started_at: 'trial_started_at',
  early_access: 'early_access'
};

exports.Prisma.HoldingsScalarFieldEnum = {
  id: 'id',
  account_id: 'account_id',
  security_id: 'security_id',
  date: 'date',
  qty: 'qty',
  price: 'price',
  amount: 'amount',
  currency: 'currency',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Impersonation_session_logsScalarFieldEnum = {
  id: 'id',
  impersonation_session_id: 'impersonation_session_id',
  controller: 'controller',
  action: 'action',
  path: 'path',
  method: 'method',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Impersonation_sessionsScalarFieldEnum = {
  id: 'id',
  impersonator_id: 'impersonator_id',
  impersonated_id: 'impersonated_id',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Import_mappingsScalarFieldEnum = {
  id: 'id',
  type: 'type',
  key: 'key',
  value: 'value',
  create_when_empty: 'create_when_empty',
  import_id: 'import_id',
  mappable_type: 'mappable_type',
  mappable_id: 'mappable_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Import_rowsScalarFieldEnum = {
  id: 'id',
  import_id: 'import_id',
  account: 'account',
  date: 'date',
  qty: 'qty',
  ticker: 'ticker',
  price: 'price',
  amount: 'amount',
  currency: 'currency',
  name: 'name',
  category: 'category',
  tags: 'tags',
  entity_type: 'entity_type',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at',
  exchange_operating_mic: 'exchange_operating_mic'
};

exports.Prisma.ImportsScalarFieldEnum = {
  id: 'id',
  column_mappings: 'column_mappings',
  status: 'status',
  raw_file_str: 'raw_file_str',
  normalized_csv_str: 'normalized_csv_str',
  created_at: 'created_at',
  updated_at: 'updated_at',
  col_sep: 'col_sep',
  family_id: 'family_id',
  account_id: 'account_id',
  type: 'type',
  date_col_label: 'date_col_label',
  amount_col_label: 'amount_col_label',
  name_col_label: 'name_col_label',
  category_col_label: 'category_col_label',
  tags_col_label: 'tags_col_label',
  account_col_label: 'account_col_label',
  qty_col_label: 'qty_col_label',
  ticker_col_label: 'ticker_col_label',
  price_col_label: 'price_col_label',
  entity_type_col_label: 'entity_type_col_label',
  notes_col_label: 'notes_col_label',
  currency_col_label: 'currency_col_label',
  date_format: 'date_format',
  signage_convention: 'signage_convention',
  error: 'error',
  number_format: 'number_format',
  exchange_operating_mic_col_label: 'exchange_operating_mic_col_label',
  amount_type_strategy: 'amount_type_strategy',
  amount_type_inflow_value: 'amount_type_inflow_value'
};

exports.Prisma.InvestmentsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  locked_attributes: 'locked_attributes'
};

exports.Prisma.InvitationsScalarFieldEnum = {
  id: 'id',
  email: 'email',
  role: 'role',
  token: 'token',
  family_id: 'family_id',
  inviter_id: 'inviter_id',
  accepted_at: 'accepted_at',
  expires_at: 'expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Invite_codesScalarFieldEnum = {
  id: 'id',
  token: 'token',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.LoansScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  rate_type: 'rate_type',
  interest_rate: 'interest_rate',
  term_months: 'term_months',
  initial_balance: 'initial_balance',
  locked_attributes: 'locked_attributes'
};

exports.Prisma.MerchantsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  family_id: 'family_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  logo_url: 'logo_url',
  website_url: 'website_url',
  type: 'type',
  source: 'source',
  provider_merchant_id: 'provider_merchant_id'
};

exports.Prisma.MessagesScalarFieldEnum = {
  id: 'id',
  chat_id: 'chat_id',
  type: 'type',
  status: 'status',
  content: 'content',
  ai_model: 'ai_model',
  created_at: 'created_at',
  updated_at: 'updated_at',
  debug: 'debug',
  provider_id: 'provider_id',
  reasoning: 'reasoning'
};

exports.Prisma.Other_assetsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  locked_attributes: 'locked_attributes'
};

exports.Prisma.Other_liabilitiesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  locked_attributes: 'locked_attributes'
};

exports.Prisma.Plaid_accountsScalarFieldEnum = {
  id: 'id',
  plaid_item_id: 'plaid_item_id',
  plaid_id: 'plaid_id',
  plaid_type: 'plaid_type',
  plaid_subtype: 'plaid_subtype',
  current_balance: 'current_balance',
  available_balance: 'available_balance',
  currency: 'currency',
  name: 'name',
  mask: 'mask',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Plaid_itemsScalarFieldEnum = {
  id: 'id',
  family_id: 'family_id',
  access_token: 'access_token',
  plaid_id: 'plaid_id',
  name: 'name',
  next_cursor: 'next_cursor',
  scheduled_for_deletion: 'scheduled_for_deletion',
  created_at: 'created_at',
  updated_at: 'updated_at',
  available_products: 'available_products',
  billed_products: 'billed_products',
  last_synced_at: 'last_synced_at',
  plaid_region: 'plaid_region',
  institution_url: 'institution_url',
  institution_id: 'institution_id',
  institution_color: 'institution_color',
  status: 'status'
};

exports.Prisma.PropertiesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  year_built: 'year_built',
  area_value: 'area_value',
  area_unit: 'area_unit',
  locked_attributes: 'locked_attributes'
};

exports.Prisma.Rejected_transfersScalarFieldEnum = {
  id: 'id',
  inflow_transaction_id: 'inflow_transaction_id',
  outflow_transaction_id: 'outflow_transaction_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Rule_actionsScalarFieldEnum = {
  id: 'id',
  rule_id: 'rule_id',
  action_type: 'action_type',
  value: 'value',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Rule_conditionsScalarFieldEnum = {
  id: 'id',
  rule_id: 'rule_id',
  parent_id: 'parent_id',
  condition_type: 'condition_type',
  operator: 'operator',
  value: 'value',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RulesScalarFieldEnum = {
  id: 'id',
  family_id: 'family_id',
  resource_type: 'resource_type',
  effective_date: 'effective_date',
  active: 'active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Schema_migrationsScalarFieldEnum = {
  version: 'version'
};

exports.Prisma.SecuritiesScalarFieldEnum = {
  id: 'id',
  ticker: 'ticker',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  country_code: 'country_code',
  exchange_mic: 'exchange_mic',
  exchange_acronym: 'exchange_acronym',
  logo_url: 'logo_url',
  exchange_operating_mic: 'exchange_operating_mic'
};

exports.Prisma.Security_pricesScalarFieldEnum = {
  id: 'id',
  date: 'date',
  price: 'price',
  currency: 'currency',
  created_at: 'created_at',
  updated_at: 'updated_at',
  security_id: 'security_id'
};

exports.Prisma.SessionsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  user_agent: 'user_agent',
  ip_address: 'ip_address',
  created_at: 'created_at',
  updated_at: 'updated_at',
  active_impersonator_session_id: 'active_impersonator_session_id',
  subscribed_at: 'subscribed_at',
  prev_transaction_page_params: 'prev_transaction_page_params'
};

exports.Prisma.SettingsScalarFieldEnum = {
  id: 'id',
  var: 'var',
  value: 'value',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Stock_exchangesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  acronym: 'acronym',
  mic: 'mic',
  country: 'country',
  country_code: 'country_code',
  city: 'city',
  website: 'website',
  timezone_name: 'timezone_name',
  timezone_abbr: 'timezone_abbr',
  timezone_abbr_dst: 'timezone_abbr_dst',
  currency_code: 'currency_code',
  currency_symbol: 'currency_symbol',
  currency_name: 'currency_name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SyncsScalarFieldEnum = {
  id: 'id',
  syncable_type: 'syncable_type',
  syncable_id: 'syncable_id',
  last_ran_at: 'last_ran_at',
  start_date: 'start_date',
  status: 'status',
  error: 'error',
  data: 'data',
  created_at: 'created_at',
  updated_at: 'updated_at',
  error_backtrace: 'error_backtrace',
  parent_id: 'parent_id'
};

exports.Prisma.TaggingsScalarFieldEnum = {
  id: 'id',
  tag_id: 'tag_id',
  taggable_type: 'taggable_type',
  taggable_id: 'taggable_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TagsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  family_id: 'family_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Tool_callsScalarFieldEnum = {
  id: 'id',
  message_id: 'message_id',
  provider_id: 'provider_id',
  provider_call_id: 'provider_call_id',
  type: 'type',
  function_name: 'function_name',
  function_arguments: 'function_arguments',
  function_result: 'function_result',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TradesScalarFieldEnum = {
  id: 'id',
  security_id: 'security_id',
  qty: 'qty',
  price: 'price',
  created_at: 'created_at',
  updated_at: 'updated_at',
  currency: 'currency',
  locked_attributes: 'locked_attributes'
};

exports.Prisma.TransactionsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  category_id: 'category_id',
  merchant_id: 'merchant_id',
  locked_attributes: 'locked_attributes',
  plaid_category: 'plaid_category',
  plaid_category_detailed: 'plaid_category_detailed'
};

exports.Prisma.TransfersScalarFieldEnum = {
  id: 'id',
  inflow_transaction_id: 'inflow_transaction_id',
  outflow_transaction_id: 'outflow_transaction_id',
  status: 'status',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  family_id: 'family_id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  password_digest: 'password_digest',
  created_at: 'created_at',
  updated_at: 'updated_at',
  role: 'role',
  active: 'active',
  onboarded_at: 'onboarded_at',
  unconfirmed_email: 'unconfirmed_email',
  otp_secret: 'otp_secret',
  otp_required: 'otp_required',
  otp_backup_codes: 'otp_backup_codes',
  show_sidebar: 'show_sidebar',
  default_period: 'default_period',
  last_viewed_chat_id: 'last_viewed_chat_id',
  show_ai_sidebar: 'show_ai_sidebar',
  ai_enabled: 'ai_enabled',
  theme: 'theme',
  rule_prompts_disabled: 'rule_prompts_disabled',
  rule_prompt_dismissed_at: 'rule_prompt_dismissed_at',
  goals: 'goals',
  set_onboarding_preferences_at: 'set_onboarding_preferences_at',
  set_onboarding_goals_at: 'set_onboarding_goals_at'
};

exports.Prisma.ValuationsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  locked_attributes: 'locked_attributes'
};

exports.Prisma.VehiclesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  year: 'year',
  mileage_value: 'mileage_value',
  mileage_unit: 'mileage_unit',
  make: 'make',
  model: 'model',
  locked_attributes: 'locked_attributes'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  accounts: 'accounts',
  active_storage_attachments: 'active_storage_attachments',
  active_storage_blobs: 'active_storage_blobs',
  active_storage_variant_records: 'active_storage_variant_records',
  addresses: 'addresses',
  ar_internal_metadata: 'ar_internal_metadata',
  balances: 'balances',
  budget_categories: 'budget_categories',
  budgets: 'budgets',
  categories: 'categories',
  chats: 'chats',
  credit_cards: 'credit_cards',
  cryptos: 'cryptos',
  data_enrichments: 'data_enrichments',
  depositories: 'depositories',
  entries: 'entries',
  exchange_rates: 'exchange_rates',
  families: 'families',
  holdings: 'holdings',
  impersonation_session_logs: 'impersonation_session_logs',
  impersonation_sessions: 'impersonation_sessions',
  import_mappings: 'import_mappings',
  import_rows: 'import_rows',
  imports: 'imports',
  investments: 'investments',
  invitations: 'invitations',
  invite_codes: 'invite_codes',
  loans: 'loans',
  merchants: 'merchants',
  messages: 'messages',
  other_assets: 'other_assets',
  other_liabilities: 'other_liabilities',
  plaid_accounts: 'plaid_accounts',
  plaid_items: 'plaid_items',
  properties: 'properties',
  rejected_transfers: 'rejected_transfers',
  rule_actions: 'rule_actions',
  rule_conditions: 'rule_conditions',
  rules: 'rules',
  schema_migrations: 'schema_migrations',
  securities: 'securities',
  security_prices: 'security_prices',
  sessions: 'sessions',
  settings: 'settings',
  stock_exchanges: 'stock_exchanges',
  syncs: 'syncs',
  taggings: 'taggings',
  tags: 'tags',
  tool_calls: 'tool_calls',
  trades: 'trades',
  transactions: 'transactions',
  transfers: 'transfers',
  users: 'users',
  valuations: 'valuations',
  vehicles: 'vehicles'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
